{"version":3,"sources":["components/News/NewSingle.jsx","components/News/News.js","components/App.js","registerServiceWorker.js","index.js"],"names":["NewSingle","_ref","item","react_default","a","createElement","className","src","urlToImage","alt","source","name","content","href","url","target","rel","News","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","news","_this2","fetch","then","response","json","data","setState","articles","catch","error","console","log","map","News_NewSingle","key","renderItems","Component","App","components_News_News","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_components_App","document","getElementById","URL","process","origin","addEventListener","concat","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yNAgBeA,SAdG,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,KAAF,OACZC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,IAAKL,EAAKM,WAAYC,IAAI,iBACxDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcJ,EAAKQ,OAAOC,MACxCR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaJ,EAAKU,UAG/BT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,KAA2BH,EAAAC,EAAAC,cAAA,KAAGQ,KAAMX,EAAKY,IAAKC,OAAO,SAASC,IAAI,uBAAvC,qBCiCtBC,cAxCd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACZC,KAAM,IAHWR,mFAOC,IAAAS,EAAAN,KAInBO,MAFC,0GAGCC,KAAK,SAAAC,GACL,OAAOA,EAASC,SAEhBF,KAAK,SAAAG,GACLL,EAAKM,SAAS,CACbP,KAAMM,EAAKE,aAGZC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,2CAI7B,OAAOf,KAAKI,MAAMC,KAAKa,IAAI,SAAAtC,GAAI,OAAIC,EAAAC,EAAAC,cAACoC,EAAD,CAAWC,IAAKxC,EAAKY,IAAKZ,KAAMA,uCAInE,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEZgB,KAAKqB,uBAjCSC,aCgBJC,mLAZX,OACE1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,YAEFH,EAAAC,EAAAC,cAACyC,EAAD,cAPUF,aCKZG,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTxB,KAAK,SAAA4B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlC,QACf6B,UAAUC,cAAcO,WAK1BzB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBH,MAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,KChEjE2B,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAIC,YAAwBrB,OAAOC,UAC3CqB,SAAWtB,OAAOC,SAASqB,OAIvC,OAGFtB,OAAOuB,iBAAiB,OAAQ,WAC9B,IAAMlB,EAAK,GAAAmB,OAAMH,YAAN,sBAEPvB,EAwCV,SAAiCO,GAE/BzB,MAAMyB,GACHxB,KAAK,SAAAC,GAGkB,MAApBA,EAAS2C,SACuD,IAAhE3C,EAAS4C,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CtB,UAAUC,cAAcsB,MAAMhD,KAAK,SAAA4B,GACjCA,EAAaqB,aAAajD,KAAK,WAC7BmB,OAAOC,SAAS8B,aAKpB3B,EAAgBC,KAGnBlB,MAAM,WACLE,QAAQC,IACN,mEA5DA0C,CAAwB3B,GAGxBD,EAAgBC,MChCxB4B","file":"static/js/main.1ec1359a.chunk.js","sourcesContent":["import React from 'react';\n\nconst NewSingle = ({item}) => (\n      <div className=\"card col-3 mb-5\">\n        <img className=\"card-img-top\" src={item.urlToImage} alt=\"{item.title}\" />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{item.source.name}</h5>\n          <p className=\"card-text\">{item.content}</p>\n        \n        </div>\n          <div className=\"card-footer\">\n          <p className=\"card-text\">  <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">Full Article</a></p>\n          </div>\n      </div>\n);\n\nexport default NewSingle;","import React, { Component } from \"react\";\nimport NewSingle from \"./NewSingle\";\n\nclass News extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnews: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst url =\n\t\t\t\"https://newsapi.org/v2/everything?q=bitcoin&sortBy=publishedAt&apiKey=b24a46973f1a441c8926e85311686acd\";\n\n\t\tfetch(url)\n\t\t\t.then(response => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then(data => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tnews: data.articles\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => console.log(error));\n\t}\n\n\trenderItems() {\n\t\treturn this.state.news.map(item => <NewSingle key={item.url} item={item} />);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t<div className=\"container\">\n\t\t<div className=\"row mb-4\">\n\n\t\t\t\t{this.renderItems()}\n\n\t\t</div>\n\t\t</div>\n\t\t);\n\t}\n}\n\nexport default News;\n","import React, { Component } from 'react';\nimport './App.css';\nimport News from \"./News/News\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">My Feed</h1>\n        </header>\n        <News />\n \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}